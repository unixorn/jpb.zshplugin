#!/usr/bin/env ruby
#
#   Copyright 2016-2021 Joe Block <jpb@unixorn.net>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# Got tired of 'vim foo' && chmod +x foo && cat /path/to/template > foo,
# so made a helper to create new scripts with the base stuff I wanted in them.

require "rubygems"
require "pp"
require "optimist"

def clean_name(name)
  # get rid of toxic spaces
  return name.gsub(" ", "_")
end

def write_script(name:, source:)
  if File.exist?(name)
    puts "There's already a file at #{name}. Bailing out."
    exit 13
  else
    File.open(name, "w") do |content|
      content.write(source)
      `chmod 755 #{name}`
    end
  end
end

def generate_bash_script(name:)
  copyright_year = `date -u "+%Y"`.chomp
  rawScript =<<"END_BASH_SCRIPT"
#!/usr/bin/env bash
#
# Script skeleton
#
# Copyright #{copyright_year}, Your Name <yourname@yourdomain.com>

set -o pipefail
if [[ -n "$DEBUG" ]]; then
  set -x
fi

function cleanup() {
  if [[ -d "$SCRATCH_D" ]]; then
    rm -fr "$SCRATCH_D"
  fi
}

function debug() {
  if [[ -n "$DEBUG" ]]; then
    echo "$@"
  fi
}

function fail() {
  printf '%s\\n' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
  exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
}

function has() {
  # Check if a command is in $PATH
  which "$@" > /dev/null 2>&1
}

# Set up a working scratch directory
SCRATCH_D=$(mktemp -d)

if [[ ! "$SCRATCH_D" || ! -d "$SCRATCH_D" ]]; then
  echo "Could not create temp dir"
  exit 1
fi

trap cleanup EXIT

END_BASH_SCRIPT
  write_script(name: name, source: rawScript)
end

def generate_python_script(name:)
  copyright_year = `date -u "+%Y"`.chomp
  rawScript =<<"END_PYTHON_SCRIPT"
#!/usr/bin/env python3
#
# Script skeleton
#
# Copyright #{copyright_year}, Your Name <yourname@yourdomain.com>

import argparse
import logging
import os
import sys


def parseCLI():
  '''
  Parse the command line options
  '''
  parser = argparse.ArgumentParser()
  parser.add_argument('-d', '--debug',
                      help='Debug setting',
                      action='store_true')
  parser.add_argument('-l', '--log-level',
                      type=str.upper,
                      help='set log level',
                      choices=['DEBUG','INFO','ERROR','WARNING','CRITICAL'],
                      default='INFO')

  cliArgs = parser.parse_args()
  loglevel = getattr(logging, cliArgs.log_level.upper(), None)
  logFormat = "[%(asctime)s][%(levelname)8s][%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s"
  logging.basicConfig(level=loglevel, format=logFormat)
  logging.info('Set log level to %s', cliArgs.log_level.upper())
  return cliArgs


def main():
  '''
  Main program driver
  '''
  cliArgs = parseCLI()


if __name__ == '__main__':
  main()

END_PYTHON_SCRIPT
  write_script(name: name, source: rawScript)
end

def generate_ruby_script(name:)
  copyright_year = `date -u "+%Y"`.chomp
  rawScript =<<'END_RUBY_SCRIPT'
#!/usr/bin/env ruby
#
# Script skeleton
#
# Copyright #{copyright_year}, Your Name <yourname@yourdomain.com>

require 'trollop'
require 'logger'

def setup_logging
  logger = Logger.new(STDOUT)
  case $opts[:log_level].upcase
  when 'DEBUG'
    logger.level = Logger::DEBUG
  when 'ERROR'
    logger.level = Logger::ERROR
  when 'FATAL'
    logger.level = Logger::FATAL
  when 'INFO'
    logger.level = Logger::INFO
  when 'WARN'
    logger.level = Logger::WARN
  end
  logger.formatter = proc do |severity, datetime, progname, msg|
    date_format = datetime.strftime("%Y-%m-%d %H:%M:%S")
    if severity == "INFO" or severity == "WARN"
      "[#{date_format}] #{severity}  (#{progname}): #{msg}\n"
    else
      "[#{date_format}] #{severity} (#{progname}): #{msg}\n"
    end
  end
  return logger
end

def main
  $opts = Trollop::options do
    version "yourscript 0.1 (c) 2016 Your Name <yourname@yourdomain.com>"
    banner <<-EOS
  The quick brown fox jumped over the lazy dog.
  Usage:
         yourscript [options]
  where [options] are:
  EOS

    opt :debug, "Set debug level", :default => 0
    opt :log_level, "Set log level", :default => "INFO", :type => String
  end

  validLevels = ['DEBUG', 'ERROR', 'FATAL', 'INFO', 'WARN']
  Trollop::die :log_level, "#{$opts[:log_level]} must be in #{validLevels}" unless validLevels.include?($opts[:log_level].upcase)

  $logger = setup_logging

end

main

END_RUBY_SCRIPT
  write_script(name: name, source: rawScript)
end

def main
  $opts = Optimist::options do
    version "newscript 0.1 (c) 2016 Joe Block <jpb@unixorn.net>"
    banner <<-EOS
  Generate a new script file from a template.
  Usage:
         newscript [options] name
  where [options] are:
  EOS

    opt :debug, "Set debug level", default: 0
    opt :script_type, "Script type. Valid options: bash, python or ruby", type: String, default: "bash"
  end

  validFlavors = ["bash", "python", "ruby"]

  # Sanity check args
  Optimist::die :script_type, "#{$opts[:script_type]} must be in #{validFlavors}" unless validFlavors.include?($opts[:script_type])
  Optimist::die "Specify at least one file name" unless ARGV.length > 0

  ARGV.each { |name|
    case $opts[:script_type]
    when "bash"
      generate_bash_script(name: name)
    when "python"
      generate_python_script(name: name)
    when "ruby"
      generate_ruby_script(name: name)
    else
      puts "script type #{$opts[:script_type]} unknown"
      exit 13
    end
  }

end

main
